// src/components/LocationsSection.tsx

import React from "react";
import type { Location } from "./registry-types";
import { v4 as uuidv4 } from "uuid"; // Ensure you have uuid installed
import { TrashIcon } from "./key-section";
interface LocationsSectionProps {
	locations: Location[];
	onAddLocation: (location: Location) => Promise<void>;
	onEditLocation: (id: string, newLocation: Location) => Promise<void>;
	onDeleteLocation: (id: string) => Promise<void>;
}

export const LocationsSection: React.FC<LocationsSectionProps> = ({
	locations,
	onAddLocation,
	// onEditLocation,
	onDeleteLocation,
}) => {
	const handleAdd = () => {
		// Prompt for comma-separated values for cities and countries
		const cityInput = prompt(
			"Enter city codes, separated by a comma (e.g., std:080):"
		);
		if (!cityInput) return; // Exit if user cancels

		const countryInput = prompt(
			"Enter country codes, separated by a comma (e.g., IND):"
		);
		if (!countryInput) return; // Exit if user cancels

		const newId = uuidv4().slice(0, 8); // Autogenerated ID

		const newLocation: Location = {
			id: newId,
			city: cityInput.split(",").map((c) => c.trim()), // Split and trim whitespace
			country: countryInput.split(",").map((c) => c.trim()),
		};

		onAddLocation(newLocation);
	};

	// const handleEdit = (id: string, currentLocation: Location) => {
	// 	const cityInput = prompt(
	// 		"Edit city codes, separated by a comma (e.g., std:080):",
	// 		currentLocation.city.join(", ")
	// 	);
	// 	if (!cityInput) return; // Exit if user cancels

	// 	const countryInput = prompt(
	// 		"Edit country codes, separated by a comma (e.g., IND):",
	// 		currentLocation.country.join(", ")
	// 	);
	// 	if (!countryInput) return; // Exit if user cancels

	// 	const updatedLocation: Location = {
	// 		id,
	// 		city: cityInput.split(",").map((c) => c.trim()),
	// 		country: countryInput.split(",").map((c) => c.trim()),
	// 	};

	// 	onEditLocation(id, updatedLocation);
	// };

	const handleDelete = (id: string) => {
		if (window.confirm("Are you sure you want to delete this location?")) {
			onDeleteLocation(id);
		}
	};

	return (
		<div className="bg-white shadow-sm rounded-xl p-6 sm:p-8">
			<h2 className="text-xl font-bold text-gray-900">üó∫Ô∏è Locations</h2>
			<p className="mt-1 text-sm text-gray-600">
				Manage city and country locations.
			</p>

			<div className="mt-6">
				<button
					onClick={handleAdd}
					className="w-full sm:w-auto flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-sky-600 hover:bg-sky-700"
				>
					+ Add Location
				</button>
			</div>

			<div className="mt-4 space-y-3">
				{locations.map((location) => (
					<div
						key={location.id}
						className="flex items-center justify-between bg-white border border-gray-200 rounded-lg p-3"
					>
						<div>
							<span className="font-mono text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
								ID: {location.id}
							</span>
							<span className="ml-4 font-medium text-gray-800">
								{location.country.join(", ")} / {location.city.join(", ")}
							</span>
						</div>
						<div className="flex gap-2">
							{/* <button
								onClick={() => handleEdit(location.id, location)}
								className="text-sm font-medium text-sky-600 hover:text-sky-800"
							>
								Edit
							</button> */}
							<button
								onClick={() => handleDelete(location.id)}
								className="text-gray-400 hover:text-red-600"
							>
								<TrashIcon />
							</button>
						</div>
						{/* Add edit/delete buttons here if needed */}
					</div>
				))}
				{locations.length === 0 && (
					<p className="text-center text-sm text-gray-500 py-4">
						No locations have been added.
					</p>
				)}
			</div>
		</div>
	);
};
